#!/usr/bin/env bash
# CyberPower UPS utility.
#
# power_ups
#
# Author: M. Krinitz <mjk235 [at] nyu [dot] edu>
# Date: 2025.05.20
# License: MIT

script=$(basename "$0")
program="power_UPS"

command_check() {
  for cmd in "$@"; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      printf "%s\n" "Error: Required command $cmd not found. Exiting." >&2
      exit 1
    fi
done
}

permission_check() {
  if [ "$EUID" -ne "0" ]; then
    whiptail --backtitle "$script" --title "$program" --msgbox "'sudo' privileges not detected. Exiting." 10 40 0
    exit 1
  fi
}

parse_pwrstat() {
  mapfile -t parsed_values < <(pwrstat -status | awk -F '[.]+' '
    /Model Name/        { print $2 }
    /Firmware Number/   { print $2 }
    /State/             { print $2 }
    /Power Supply by/   { print $2 }
    /Battery Capacity/  { print $2 }
    /Remaining Runtime/ { print $2 }
    /Load/              { print $2 }
    /Last Power Event/  { print $2 }
  ')
}

format_parsed_values_stats() {
  printf "Model Name:       %s\n" "${parsed_values[0]}"
  printf "Firmware Number:  %s\n" "${parsed_values[1]}"
  printf "State:            %s\n" "${parsed_values[2]}"
  printf "Power Supply by:  %s\n" "${parsed_values[3]}"
  printf "Battery Capacity: %s\n" "${parsed_values[4]}"
  printf "Last Power Event: %s\n" "${parsed_values[7]}"
}

format_parsed_values_runtime() {
  printf "Remaining Runtime:%s\n" "${parsed_values[5]}"
  printf "Load:             %s\n" "${parsed_values[6]}"
}

run_ups_test() {
  pwrstat -test >/dev/null 2>&1 &
  test_pid=$!
}

progress_bar() {
  {
    for ((i = 0; i <= 150; i++)); do
        sleep 0.1
        printf "%s\n" $((i * 100 / 150))
    done

  } | whiptail --gauge "Running the UPS test. Please wait..." 10 40 0

  wait $test_pid
}

parse_pwrstat_test_result() {
  pwrstat -status | awk -F '[.]+' '/Test Result/ { print "Test Result:            "$2 }'
}

ups_stats() {
  local formatted_output
  formatted_output=$(format_parsed_values_stats)
  TERM=ansi whiptail --backtitle "$script" --title "$program" --msgbox "$formatted_output" 16 72 0
}

ups_runtime() {
  local formatted_output
  formatted_output=$(format_parsed_values_runtime)
  TERM=ansi whiptail --backtitle "$script" --title "$program" --msgbox "$formatted_output" 16 72 0
}

ups_test_result() {
  TERM=ansi whiptail --backtitle "$script" --title "$program" --msgbox "$(parse_pwrstat_test_result)" 12 72 0
}

tui_menu() {
  TERM=ansi whiptail --backtitle "$script" --title "$program" --menu "Select an option" 12 48 4 \
  "Status" "Display current UPS status" \
  "Runtime" "Display estimated UPS runtime" \
  "Test" "Perform UPS battery check" \
  "Exit" "Quit program" 3>&1 1>&2 2>&3
}

main() {
  clear
  command_check "pwrstat" "whiptail"
  permission_check
  parse_pwrstat
  while true; do
    choice=$(tui_menu)

    case $choice in
        Status)
            ups_stats
            ;;
        Runtime)
            ups_runtime
            ;;
        Test)
            run_ups_test
            progress_bar
            ups_test_result
            ;;
        Exit)
            whiptail --msgbox "Exiting." 12 40 0
            break
            ;;
        *)
            whiptail --msgbox "Invalid selection" 12 40 0
            ;;
    esac
  done
}

main "$@"
